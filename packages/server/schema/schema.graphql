"""The root of all... queries"""
type Query {
  """The ID of an object"""
  id: ID!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  multipleChoice(id: ID!): MultipleChoice
  multipleChoices(after: String, first: Int, before: String, last: Int): MultipleChoiceConnection!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""MultipleChoice data"""
type MultipleChoice implements Node {
  """The ID of an object"""
  id: ID!

  """Mongo _id"""
  _id: String!
  question: String
  statements: [String]
  correctAnswer: String
  markedAnswer: String
  createdAt: String
  updatedAt: String
}

"""A connection to a list of items."""
type MultipleChoiceConnection {
  """Number of items in this connection"""
  count: Int!

  """
  A count of the total number of objects in this connection, ignoring pagination.
    This allows a client to fetch the first five objects by passing "5" as the
    argument to "first", then fetch the total count so it could display "5 of 83",
    for example.
  """
  totalCount: Int!

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [MultipleChoiceEdge]!
}

"""Information about pagination in a connection."""
type PageInfoExtended {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type MultipleChoiceEdge {
  """The item at the end of the edge"""
  node: MultipleChoice!

  """A cursor for use in pagination"""
  cursor: String!
}

"""The root of all... mutations"""
type Mutation {
  MultipleChoiceAdd(input: MultipleChoiceAddInput!): MultipleChoiceAddPayload
  MultipleChoiceEdit(input: MultipleChoiceEditInput!): MultipleChoiceEditPayload
  MultipleChoiceDelete(input: MultipleChoiceDeleteInput!): MultipleChoiceDeletePayload
  MultipleChoiceEditMarkedAnswer(input: MultipleChoiceEditMarkedAnswerInput!): MultipleChoiceEditMarkedAnswerPayload
}

type MultipleChoiceAddPayload {
  error: String
  multipleChoiceEdge: MultipleChoiceEdge
  clientMutationId: String
}

input MultipleChoiceAddInput {
  question: String!
  statements: [String]!
  correctAnswer: String!
  clientMutationId: String
}

type MultipleChoiceEditPayload {
  error: String
  multipleChoice: MultipleChoice
  clientMutationId: String
}

input MultipleChoiceEditInput {
  id: ID!
  question: String
  statements: [String]
  correctAnswer: String
  clientMutationId: String
}

type MultipleChoiceDeletePayload {
  error: String
  success: String
  clientMutationId: String
}

input MultipleChoiceDeleteInput {
  id: ID!
  clientMutationId: String
}

type MultipleChoiceEditMarkedAnswerPayload {
  error: String
  success: String
  clientMutationId: String
}

input MultipleChoiceEditMarkedAnswerInput {
  id: ID!
  markedAnswer: String
  clientMutationId: String
}
